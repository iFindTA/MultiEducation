// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MEStuFun.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MestuFun.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MestuFunRoot

@implementation MestuFunRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MestuFunRoot_FileDescriptor

static GPBFileDescriptor *MestuFunRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GuFunPhotoListPb

@implementation GuFunPhotoListPb

@dynamic funPhotoPbArray, funPhotoPbArray_Count;

typedef struct GuFunPhotoListPb__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *funPhotoPbArray;
} GuFunPhotoListPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "funPhotoPbArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GuFunPhotoPb),
        .number = GuFunPhotoListPb_FieldNumber_FunPhotoPbArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GuFunPhotoListPb__storage_, funPhotoPbArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GuFunPhotoListPb class]
                                     rootClass:[MestuFunRoot class]
                                          file:MestuFunRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GuFunPhotoListPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000funPhotoPb\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GuFunPhotoPb

@implementation GuFunPhotoPb

@dynamic id_p;
@dynamic studentId;
@dynamic gradeId;
@dynamic month;
@dynamic title;
@dynamic funText;
@dynamic status;
@dynamic studentListArray, studentListArray_Count;
@dynamic imgListArray, imgListArray_Count;
@dynamic type;
@dynamic createdDate;

typedef struct GuFunPhotoPb__storage_ {
  uint32_t _has_storage_[1];
  int32_t month;
  int32_t status;
  int32_t type;
  NSString *title;
  NSString *funText;
  NSMutableArray *studentListArray;
  NSMutableArray *imgListArray;
  int64_t id_p;
  int64_t studentId;
  int64_t gradeId;
  int64_t createdDate;
} GuFunPhotoPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "studentId",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_StudentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, studentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "gradeId",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_GradeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, gradeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "month",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_Month,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, month),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "funText",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_FunText,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, funText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "studentListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GuFunPhotoStudentPb),
        .number = GuFunPhotoPb_FieldNumber_StudentListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, studentListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imgListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GuFunPhotoImgPb),
        .number = GuFunPhotoPb_FieldNumber_ImgListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, imgListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createdDate",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoPb_FieldNumber_CreatedDate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GuFunPhotoPb__storage_, createdDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GuFunPhotoPb class]
                                     rootClass:[MestuFunRoot class]
                                          file:MestuFunRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GuFunPhotoPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\007\000\006\007\000\010\000studentList\000\t\000imgList\000\013\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GuFunPhotoStudentPb

@implementation GuFunPhotoStudentPb

@dynamic studentId;

typedef struct GuFunPhotoStudentPb__storage_ {
  uint32_t _has_storage_[1];
  int64_t studentId;
} GuFunPhotoStudentPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "studentId",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoStudentPb_FieldNumber_StudentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GuFunPhotoStudentPb__storage_, studentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GuFunPhotoStudentPb class]
                                     rootClass:[MestuFunRoot class]
                                          file:MestuFunRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GuFunPhotoStudentPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GuFunPhotoImgPb

@implementation GuFunPhotoImgPb

@dynamic imgPath;

typedef struct GuFunPhotoImgPb__storage_ {
  uint32_t _has_storage_[1];
  NSString *imgPath;
} GuFunPhotoImgPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imgPath",
        .dataTypeSpecific.className = NULL,
        .number = GuFunPhotoImgPb_FieldNumber_ImgPath,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GuFunPhotoImgPb__storage_, imgPath),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GuFunPhotoImgPb class]
                                     rootClass:[MestuFunRoot class]
                                          file:MestuFunRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GuFunPhotoImgPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
