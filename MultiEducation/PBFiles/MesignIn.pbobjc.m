// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MESignIn.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MesignIn.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MesignInRoot

@implementation MesignInRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MesignInRoot_FileDescriptor

static GPBFileDescriptor *MesignInRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - LoginPb

@implementation LoginPb

@dynamic loginName;
@dynamic password;
@dynamic token;
@dynamic name;
@dynamic appleToken;
@dynamic code;
@dynamic classNo;

typedef struct LoginPb__storage_ {
  uint32_t _has_storage_[1];
  NSString *loginName;
  NSString *password;
  NSString *token;
  NSString *name;
  NSString *appleToken;
  NSString *code;
  NSString *classNo;
} LoginPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginName",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_LoginName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginPb__storage_, loginName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginPb__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginPb__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginPb__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appleToken",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_AppleToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginPb__storage_, appleToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_Code,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LoginPb__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classNo",
        .dataTypeSpecific.className = NULL,
        .number = LoginPb_FieldNumber_ClassNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(LoginPb__storage_, classNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginPb class]
                                     rootClass:[MesignInRoot class]
                                          file:MesignInRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\006\n\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
