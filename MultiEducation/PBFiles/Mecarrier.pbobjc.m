// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MECarrier.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Mecarrier.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MecarrierRoot

@implementation MecarrierRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MecarrierRoot_FileDescriptor

static GPBFileDescriptor *MecarrierRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MECarrierPB

@implementation MECarrierPB

@dynamic cmdCode;
@dynamic reqCode;
@dynamic respCode;
@dynamic msg;
@dynamic source;
@dynamic token;
@dynamic openTransaction;
@dynamic isAcross;
@dynamic cmdVersion;
@dynamic sessionToken;

typedef struct MECarrierPB__storage_ {
  uint32_t _has_storage_[1];
  NSString *cmdCode;
  NSString *reqCode;
  NSString *respCode;
  NSString *msg;
  NSData *source;
  NSString *token;
  NSString *cmdVersion;
  NSString *sessionToken;
} MECarrierPB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmdCode",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_CmdCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, cmdCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqCode",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_ReqCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, reqCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "respCode",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_RespCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, respCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_Msg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_Source,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_Token,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openTransaction",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_OpenTransaction,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAcross",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_IsAcross,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cmdVersion",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_CmdVersion,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, cmdVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionToken",
        .dataTypeSpecific.className = NULL,
        .number = MECarrierPB_FieldNumber_SessionToken,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MECarrierPB__storage_, sessionToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MECarrierPB class]
                                     rootClass:[MecarrierRoot class]
                                          file:MecarrierRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MECarrierPB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\007\000\002\007\000\003\010\000\007\017\000\010\010\000\t\n\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
