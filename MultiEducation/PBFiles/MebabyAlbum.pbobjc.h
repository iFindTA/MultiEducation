// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MEBabyAlbum.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - MebabyAlbumRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface MebabyAlbumRoot : GPBRootObject
@end

#pragma mark - ClassAlbumPb

typedef GPB_ENUM(ClassAlbumPb_FieldNumber) {
  ClassAlbumPb_FieldNumber_Id_p = 1,
  ClassAlbumPb_FieldNumber_ClassId = 2,
  ClassAlbumPb_FieldNumber_IsParent = 3,
  ClassAlbumPb_FieldNumber_ParentId = 4,
  ClassAlbumPb_FieldNumber_FileId = 5,
  ClassAlbumPb_FieldNumber_FileName = 6,
  ClassAlbumPb_FieldNumber_FileType = 7,
  ClassAlbumPb_FieldNumber_FileSize = 8,
  ClassAlbumPb_FieldNumber_FilePath = 9,
  ClassAlbumPb_FieldNumber_DataStatus = 10,
  ClassAlbumPb_FieldNumber_CreatedDate = 11,
  ClassAlbumPb_FieldNumber_ModifiedDate = 12,
  ClassAlbumPb_FieldNumber_Md5 = 13,
};

@interface ClassAlbumPb : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

/** 班级id */
@property(nonatomic, readwrite) int64_t classId;

/** 是否为父节点1是0否 */
@property(nonatomic, readwrite) int32_t isParent;

/** 父节点id */
@property(nonatomic, readwrite) int64_t parentId;

/** 节点id */
@property(nonatomic, readwrite) int64_t fileId;

/** 文件名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileName;

/** 文件类型值 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fileType;

/** 文件大小单位字节 */
@property(nonatomic, readwrite) int64_t fileSize;

/** 文件路径 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *filePath;

/** 数据状态 */
@property(nonatomic, readwrite) int32_t dataStatus;

@property(nonatomic, readwrite) int64_t createdDate;

@property(nonatomic, readwrite) int64_t modifiedDate;

/** 文件md5 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *md5;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
