// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MEClassChat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MeclassChat.pbobjc.h"
 #import "Mesession.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MeclassChatRoot

@implementation MeclassChatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MeclassChatRoot_FileDescriptor

static GPBFileDescriptor *MeclassChatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MECUser

@implementation MECUser

@dynamic sessionId;
@dynamic userId;
@dynamic inviterId;
@dynamic status;
@dynamic createdDate;
@dynamic modifiedDate;
@dynamic timestamp;

typedef struct MECUser__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int64_t sessionId;
  int64_t userId;
  int64_t inviterId;
  int64_t createdDate;
  int64_t modifiedDate;
  int64_t timestamp;
} MECUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MECUser__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MECUser__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_InviterId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MECUser__storage_, inviterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MECUser__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createdDate",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_CreatedDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MECUser__storage_, createdDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "modifiedDate",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_ModifiedDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MECUser__storage_, modifiedDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = MECUser_FieldNumber_Timestamp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MECUser__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MECUser class]
                                     rootClass:[MeclassChatRoot class]
                                          file:MeclassChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MECUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\006\000\003\t\000\005\013\000\006\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MECSession

@implementation MECSession

@dynamic id_p;
@dynamic uuid;
@dynamic name;
@dynamic classId;
@dynamic createdDate;
@dynamic timestamp;
@dynamic userArray, userArray_Count;
@dynamic hasBaseSession, baseSession;
@dynamic sessionStatus;

typedef struct MECSession__storage_ {
  uint32_t _has_storage_[1];
  int32_t sessionStatus;
  NSString *uuid;
  NSString *name;
  NSMutableArray *userArray;
  MESession *baseSession;
  int64_t id_p;
  int64_t classId;
  int64_t createdDate;
  int64_t timestamp;
} MECSession__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MECSession__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MECSession__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MECSession__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "classId",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_ClassId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MECSession__storage_, classId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdDate",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_CreatedDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MECSession__storage_, createdDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_Timestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MECSession__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MECUser),
        .number = MECSession_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MECSession__storage_, userArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "baseSession",
        .dataTypeSpecific.className = GPBStringifySymbol(MESession),
        .number = MECSession_FieldNumber_BaseSession,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MECSession__storage_, baseSession),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionStatus",
        .dataTypeSpecific.className = NULL,
        .number = MECSession_FieldNumber_SessionStatus,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MECSession__storage_, sessionStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MECSession class]
                                     rootClass:[MeclassChatRoot class]
                                          file:MeclassChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MECSession__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\004\007\000\005\013\000\010\013\000\t\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
