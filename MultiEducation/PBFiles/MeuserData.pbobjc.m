// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MEUserData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MeuserData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MeuserDataRoot

@implementation MeuserDataRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MeuserDataRoot_FileDescriptor

static GPBFileDescriptor *MeuserDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FscUserPbList

@implementation FscUserPbList

@dynamic hasFscUserPb, fscUserPb;

typedef struct FscUserPbList__storage_ {
  uint32_t _has_storage_[1];
  FscUserPb *fscUserPb;
} FscUserPbList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fscUserPb",
        .dataTypeSpecific.className = GPBStringifySymbol(FscUserPb),
        .number = FscUserPbList_FieldNumber_FscUserPb,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FscUserPbList__storage_, fscUserPb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FscUserPbList class]
                                     rootClass:[MeuserDataRoot class]
                                          file:MeuserDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FscUserPbList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FscUserPb

@implementation FscUserPb

@dynamic id_p;
@dynamic username;
@dynamic password;
@dynamic name;
@dynamic gender;
@dynamic mobile;
@dynamic userType;
@dynamic portrait;
@dynamic schoolName;
@dynamic keyword;
@dynamic linkmanId;
@dynamic addStatus;
@dynamic classId;
@dynamic code;
@dynamic qqUid;
@dynamic wxUid;
@dynamic diskCap;
@dynamic sessionToken;
@dynamic repassword;

typedef struct FscUserPb__storage_ {
  uint32_t _has_storage_[1];
  int32_t gender;
  int32_t userType;
  int32_t addStatus;
  NSString *username;
  NSString *password;
  NSString *name;
  NSString *mobile;
  NSString *portrait;
  NSString *schoolName;
  NSString *keyword;
  NSString *code;
  NSString *qqUid;
  NSString *wxUid;
  NSString *sessionToken;
  NSString *repassword;
  int64_t id_p;
  int64_t linkmanId;
  int64_t classId;
  int64_t diskCap;
} FscUserPb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Password,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Mobile,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userType",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_UserType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, userType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "portrait",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Portrait,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, portrait),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "schoolName",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_SchoolName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, schoolName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Keyword,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "linkmanId",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_LinkmanId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, linkmanId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "addStatus",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_AddStatus,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, addStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "classId",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_ClassId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, classId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Code,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qqUid",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_QqUid,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, qqUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wxUid",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_WxUid,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, wxUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "diskCap",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_DiskCap,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, diskCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sessionToken",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_SessionToken,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, sessionToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "repassword",
        .dataTypeSpecific.className = NULL,
        .number = FscUserPb_FieldNumber_Repassword,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(FscUserPb__storage_, repassword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FscUserPb class]
                                     rootClass:[MeuserDataRoot class]
                                          file:MeuserDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FscUserPb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\007\010\000\t\n\000\013\t\000\014\t\000\r\007\000\017\005\000\020\005\000\021\007\000\022\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
