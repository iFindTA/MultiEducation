// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "google/protobuf/Timestamp.pbobjc.h"
#endif

 #import "Addressbook.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AddressbookRoot

@implementation AddressbookRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AddressbookRoot_FileDescriptor

static GPBFileDescriptor *AddressbookRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tutorial"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Person

@implementation Person

@dynamic name;
@dynamic id_p;
@dynamic email;
@dynamic phonesArray, phonesArray_Count;
@dynamic hasLastUpdated, lastUpdated;

typedef struct Person__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  NSString *name;
  NSString *email;
  NSMutableArray *phonesArray;
  GPBTimestamp *lastUpdated;
} Person__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Person__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Person__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = Person_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Person__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phonesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Person_PhoneNumber),
        .number = Person_FieldNumber_PhonesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Person__storage_, phonesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Person_FieldNumber_LastUpdated,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Person__storage_, lastUpdated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Person class]
                                     rootClass:[AddressbookRoot class]
                                          file:AddressbookRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Person__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Person_PhoneType

GPBEnumDescriptor *Person_PhoneType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Mobile\000Home\000Work\000";
    static const int32_t values[] = {
        Person_PhoneType_Mobile,
        Person_PhoneType_Home,
        Person_PhoneType_Work,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Person_PhoneType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Person_PhoneType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Person_PhoneType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Person_PhoneType_Mobile:
    case Person_PhoneType_Home:
    case Person_PhoneType_Work:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Person_PhoneNumber

@implementation Person_PhoneNumber

@dynamic number;
@dynamic type;

typedef struct Person_PhoneNumber__storage_ {
  uint32_t _has_storage_[1];
  Person_PhoneType type;
  NSString *number;
} Person_PhoneNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = Person_PhoneNumber_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Person_PhoneNumber__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Person_PhoneType_EnumDescriptor,
        .number = Person_PhoneNumber_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Person_PhoneNumber__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Person_PhoneNumber class]
                                     rootClass:[AddressbookRoot class]
                                          file:AddressbookRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Person_PhoneNumber__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Person)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Person_PhoneNumber_Type_RawValue(Person_PhoneNumber *message) {
  GPBDescriptor *descriptor = [Person_PhoneNumber descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Person_PhoneNumber_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPerson_PhoneNumber_Type_RawValue(Person_PhoneNumber *message, int32_t value) {
  GPBDescriptor *descriptor = [Person_PhoneNumber descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Person_PhoneNumber_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AddressBook

@implementation AddressBook

@dynamic peopleArray, peopleArray_Count;

typedef struct AddressBook__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *peopleArray;
} AddressBook__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peopleArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Person),
        .number = AddressBook_FieldNumber_PeopleArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddressBook__storage_, peopleArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddressBook class]
                                     rootClass:[AddressbookRoot class]
                                          file:AddressbookRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddressBook__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
